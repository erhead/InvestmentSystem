/*flexberryautogenerated="true"*/
namespace IIS.Flexberry.Reports.Forms
{
    using ICSSoft.STORMNET;
    using ICSSoft.STORMNET.FunctionalLanguage;
    using ICSSoft.STORMNET.FunctionalLanguage.SQLWhere;
    using ICSSoft.STORMNET.Web.Controls;
    using ICSSoft.STORMNET.Windows.Forms;

    using IIS.Flexberry.Reports.Core.Objects;

    public partial class ModuleReportTemplateE : BaseEditForm<ModuleReportTemplate>
    {
        /// <summary>
        /// Конструктор формы
        /// </summary>
        public ModuleReportTemplateE()
            : base("ModuleReportTemplateForAdding")
        {
        }

        /// <summary>
        /// Путь до формы.
        /// </summary>
        public static string FormPath
        {
            get { return "~/forms/Report/ModuleReportTemplate/ModuleReportTemplateE.aspx"; }
        }

        /// <summary>
        /// Вызывается самым первым в Page_Load
        /// </summary>
        protected override void Preload()
        {
        }

        /// <summary>
        /// Здесь лучше всего писать бизнес-логику, оперируя только объектом данных
        /// </summary>
        protected override void PreApplyToControls()
        {
            string moduleName = Request["MName"];
            if (!string.IsNullOrWhiteSpace(moduleName))
            {
                DataObject.Module = moduleName;
            }
        }

        /// <summary>
        /// Особая инициализация нужна, поскольку форма используется исключительно для добавления записей.
        /// </summary>
        protected override void PrepareDataObject()
        {
            if (PK == null && Request.RequestType == "GET")
            {
                DataObject = new ModuleReportTemplate();
            }
            else
            {
                base.PrepareDataObject();
            }
        }

        /// <summary>
        /// Здесь лучше всего изменять свойства контролов на странице, которые не обрабатываются WebBinder
        /// </summary>
        protected override void PostApplyToControls()
        {
            if (ReadOnly)
            {
                SaveAndCloseBtn.Visible = false;
                SaveBtn.Visible = false;
                wb.SetReadOnlyForm(this.Controls, View, true);
            }

            string backURL = Request["ReturnUrl"];
            if (string.IsNullOrEmpty(backURL))
            {
                SaveAndCloseBtn.Visible = false;
                CancelBtn.Visible = false;
            }

            Page.Validate();
        }

        /// <summary>
        /// Вызывается самым последним в Page_Load
        /// </summary>
        protected override void Postload()
        {
            var langDef = ExternalLangDef.LanguageDef;

            // Сначала получаем ограничение на существование псевдодетейлов.
            var dvd = new DetailVariableDef(
                langDef.GetObjectType("Details"),
                "ReportTemplate__Module",
                ModuleReportTemplate.Views.ModuleReportTemplateForAdding,
                Information.ExtractPropertyPath<ModuleReportTemplate>(x => x.ReportTemplate),
                new[] { SQLWhereLanguageDef.StormMainObjectKey });

            // Потом получаем условие на псевдодетейлы, у которых модуль равен текущему.
            var lf = langDef.GetFunction(
                "Exist",
                dvd,
                langDef.GetFunction(
                    langDef.funcEQ,
                    new VariableDef(
                        langDef.StringType, Information.ExtractPropertyPath<ModuleReportTemplate>(x => x.Module)),
                    DataObject.Module));

            // Потом получаем условие на отсутствие таких псевдодетейлов.
            lf = langDef.GetFunction(langDef.funcNOT, lf);

            // Потом получаем условие, что пользователь либо текущий, либо отчёт общий.
            var lfor = langDef.GetFunction(
                langDef.funcOR,
                langDef.GetFunction(
                    langDef.funcEQ,
                    new VariableDef(
                        langDef.BoolType, Information.ExtractPropertyPath<ReportTemplate>(x => x.IsShared)),
                    langDef.paramTrue),
                langDef.GetFunction(
                    langDef.funcEQ,
                    new VariableDef(
                        langDef.StringType, Information.ExtractPropertyPath<ReportTemplate>(x => x.Owner)),
                    ICSSoft.Services.CurrentUserService.CurrentUser.FriendlyName));

            var lfresult = langDef.GetFunction(langDef.funcAND, lf, lfor);

            ctrlReportTemplate.LimitFunction = lfresult;
        }

        /// <summary>
        /// Валидация объекта для сохранения
        /// </summary>
        /// <returns>true - продолжать сохранение, иначе - прекратить</returns>
        protected override bool PreSaveObject()
        {
            return base.PreSaveObject();
        }

        /// <summary>
        /// Нетривиальная логика сохранения объекта
        /// </summary>
        /// <returns>Объект данных, который сохранился</returns>
        protected override DataObject SaveObject()
        {
            return base.SaveObject();
        }
    }
}